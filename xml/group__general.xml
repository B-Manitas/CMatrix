<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__general" kind="group">
    <compoundname>general</compoundname>
    <title>CMatrix</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__general_1ga0a4525e6c737050e759f753c00001666" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::print</definition>
        <argsstring>() const</argsstring>
        <name>print</name>
        <briefdescription>
<para>Print the matrix in the standard output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="781" column="10" bodyfile="src/CMatrix.tpp" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1ga1766cb6d6c5f9c0f593aafd056b59d52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clear the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="787" column="10" bodyfile="src/CMatrix.tpp" bodystart="19" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1gadabfe43fa749744cf8ee5ad12a3f13cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::copy</definition>
        <argsstring>() const</argsstring>
        <name>copy</name>
        <briefdescription>
<para>Copy the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>cmatrix&lt;T&gt; The copied matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="795" column="13" bodyfile="src/CMatrix.tpp" bodystart="25" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1gaaa4ca3ea57ca8b7c41d2fc90c1913099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::apply</definition>
        <argsstring>(const std::function&lt; T(T, size_t *, size_t *)&gt; &amp;f, size_t *col=nullptr, size_t *row=nullptr)</argsstring>
        <name>apply</name>
        <param>
          <type>const std::function&lt; T(T, size_t *, size_t *)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>col</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>size_t *</type>
          <declname>row</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Apply a function to each cell of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to apply. f(T value, size_t *id_col, size_t *id_row) -&gt; T </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the column index. (default: nullptr) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the row index. (default: nullptr) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="805" column="10" bodyfile="src/CMatrix.tpp" bodystart="37" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1gad65689b82797403b62c13d7d4eeee6b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::apply</definition>
        <argsstring>(const std::function&lt; T(T)&gt; &amp;f)</argsstring>
        <name>apply</name>
        <param>
          <type>const std::function&lt; T(T)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Apply a function to each cell of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to apply. f(T value) -&gt; T </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="813" column="10" bodyfile="src/CMatrix.tpp" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1ga2caab6666627a6fdf4d31f14716d5f08" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::map</definition>
        <argsstring>(const std::function&lt; T(T, size_t *, size_t *)&gt; &amp;f, size_t *col=nullptr, size_t *row=nullptr) const</argsstring>
        <name>map</name>
        <param>
          <type>const std::function&lt; T(T, size_t *, size_t *)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>col</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>size_t *</type>
          <declname>row</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Apply a function to each cell of the matrix and return the result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to apply. f(T value, size_t *id_col, size_t *id_row) -&gt; T </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the column index. (default: nullptr) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the row index. (default: nullptr) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The result of the function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="824" column="13" bodyfile="src/CMatrix.tpp" bodystart="64" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1gaec11f70e818f918e023fd091306204ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::map</definition>
        <argsstring>(const std::function&lt; T(T)&gt; &amp;f) const</argsstring>
        <name>map</name>
        <param>
          <type>const std::function&lt; T(T)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Apply a function to each cell of the matrix and return the result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to apply. f(T value) -&gt; T </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The result of the function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="833" column="13" bodyfile="src/CMatrix.tpp" bodystart="72" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1ga70ed516d04d245c16f3bda79284f000b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::fill</definition>
        <argsstring>(const T &amp;val)</argsstring>
        <name>fill</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Fill the matrix with a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to fill the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="841" column="10" bodyfile="src/CMatrix.tpp" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1ga632bae1f8b175c072f8641c46ec9ff1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; T &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; T &gt; &gt; cmatrix&lt; T &gt;::to_vector</definition>
        <argsstring>() const</argsstring>
        <name>to_vector</name>
        <briefdescription>
<para>Convert the matrix to a vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;T&gt; The vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="849" column="17" bodyfile="src/CMatrix.tpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1ga1e8370d047a279c67ca8727a80d8bfd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; U &gt;</type>
        <definition>cmatrix&lt; U &gt; cmatrix&lt; T &gt;::cast</definition>
        <argsstring>() const</argsstring>
        <name>cast</name>
        <briefdescription>
<para>Convert the matrix to a matrix of another type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix<underline> The matrix of another type. </underline></para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para><underline>If the type T is not convertible to the type U. </underline></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="860" column="13" bodyfile="src/CMatrix.tpp" bodystart="94" bodyend="113"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
