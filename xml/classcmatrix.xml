<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcmatrix" kind="class" language="C++" prot="public">
    <compoundname>cmatrix</compoundname>
    <includes refid="CMatrix_8hpp" local="no">CMatrix.hpp</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcmatrix_1a7e0f2a5a18601d9d5f9fc7c6ca80bf02" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; T &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;T&gt; &gt; cmatrix&lt; T &gt;::matrix</definition>
        <argsstring></argsstring>
        <name>matrix</name>
        <initializer>= std::vector&lt;std::vector&lt;T&gt;&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="29" column="17" bodyfile="include/CMatrix.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="group__statistics_1gab9ff2abcabe6974a3412789c31c58d6e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; float &gt;</type>
        <definition>cmatrix&lt; float &gt; cmatrix&lt; T &gt;::__mean</definition>
        <argsstring>(const unsigned int &amp;axis, std::true_type) const</argsstring>
        <name>__mean</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
<para>Compute the mean value for each row (axis: 0) or column (axis: 1) of the matrix. This method is used when the type of the matrix is arithmetic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the mean value. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>true_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix is arithmetic. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;float&gt; The mean value for each row or column of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the axis is not 0 or 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="42" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="151" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1gab428ffa20b11d80e8b5cdea9bf7c92d1" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; float &gt;</type>
        <definition>cmatrix&lt; float &gt; cmatrix&lt; T &gt;::__mean</definition>
        <argsstring>(const unsigned int &amp;axis, std::false_type) const</argsstring>
        <name>__mean</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
<para>Compute the mean value for each row (axis: 0) or column (axis: 1) of the matrix. This method is used when the type of the matrix is not arithmetic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the mean value. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix is not arithmetic. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrix is not arithmetic. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="54" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1ga05dfe44daa6c03a8bac52dbc2a6656f8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; float &gt;</type>
        <definition>cmatrix&lt; float &gt; cmatrix&lt; T &gt;::__std</definition>
        <argsstring>(const unsigned int &amp;axis, std::true_type) const</argsstring>
        <name>__std</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
<para>Compute the std value for each row (axis: 0) or column (axis: 1) of the matrix. This method is used when the type of the matrix is arithmetic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the std value. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>true_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix is arithmetic. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;float&gt; The std value for each row or column of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the axis is not 0 or 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="66" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="180" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1ga423f15c24af04cdafd322f6243ff0dcd" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; float &gt;</type>
        <definition>cmatrix&lt; float &gt; cmatrix&lt; T &gt;::__std</definition>
        <argsstring>(const unsigned int &amp;axis, std::false_type) const</argsstring>
        <name>__std</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
<para>Compute the std value for each row (axis: 0) or column (axis: 1) of the matrix. This method is used when the type of the matrix is not arithmetic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the std value. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix is not arithmetic. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrix is not arithmetic. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="77" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a7a27f3def1551cb1220a7edc15e136a2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::__map_op_arithmetic</definition>
        <argsstring>(const std::function&lt; T(T, T)&gt; &amp;f, const cmatrix&lt; T &gt; &amp;m) const</argsstring>
        <name>__map_op_arithmetic</name>
        <param>
          <type>const std::function&lt; T(T, T)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Apply a operator to each cell of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The operator to apply. f(T value, T value) -&gt; T </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to apply. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The result of the operator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="87" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="282" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a91ecd6a81bd2678c0553d321df0c3573" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; short unsigned int &gt;</type>
        <definition>cmatrix&lt; short unsigned int &gt; cmatrix&lt; T &gt;::__map_op_comparaison_val</definition>
        <argsstring>(const std::function&lt; T(T, T)&gt; &amp;f, const T &amp;n) const</argsstring>
        <name>__map_op_comparaison_val</name>
        <param>
          <type>const std::function&lt; T(T, T)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Map a comparison operator to each cell of the matrix and return a matrix of boolean. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The comparison operator to apply. f(T value, T value) -&gt; bool </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The number to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;short unsigned int&gt; The result of the comparison. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="97" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="296" bodyend="311"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcmatrix_1aac0edd8caac8b0ff2f9f02cddd3f9428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cmatrix&lt; T &gt;::cmatrix</definition>
        <argsstring>(const std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; &amp;m)</argsstring>
        <name>cmatrix</name>
        <param>
          <type>const std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Construct a new cmatrix object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the initializer list is not a matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the type is bool. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="110" column="5" bodyfile="src/CMatrixConstructor.tpp" bodystart="19" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a40154e7ad0df15f5f01cc1c7fff3df86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cmatrix&lt; T &gt;::cmatrix</definition>
        <argsstring>()</argsstring>
        <name>cmatrix</name>
        <briefdescription>
<para>Construct a new cmatrix object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the type is bool. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="118" column="5" bodyfile="src/CMatrixConstructor.tpp" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1adc7b866d102dc4bd8b9539fdd5dfc640" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cmatrix&lt; T &gt;::cmatrix</definition>
        <argsstring>(const size_t &amp;dim_v, const size_t &amp;dim_h)</argsstring>
        <name>cmatrix</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>dim_v</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>dim_h</declname>
        </param>
        <briefdescription>
<para>Construct a new cmatrix object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim_v</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rows. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim_h</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of columns. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the type is bool. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="128" column="5" bodyfile="src/CMatrixConstructor.tpp" bodystart="32" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a39c7266a95655c8c7e7047e1806be52d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cmatrix&lt; T &gt;::cmatrix</definition>
        <argsstring>(const size_t &amp;dim_v, const size_t &amp;dim_h, const T &amp;val)</argsstring>
        <name>cmatrix</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>dim_v</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>dim_h</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Construct a new cmatrix object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim_v</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rows. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim_h</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of columns. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to fill the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the type is bool. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="139" column="5" bodyfile="src/CMatrixConstructor.tpp" bodystart="40" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a4548d3427fe2306c3bdb8977a4e23224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>cmatrix&lt; T &gt;::cmatrix</definition>
        <argsstring>(const cmatrix&lt; U &gt; &amp;m)</argsstring>
        <name>cmatrix</name>
        <param>
          <type>const <ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; U &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Cast a matrix to another type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the type is bool. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="150" column="5" bodyfile="src/CMatrixConstructor.tpp" bodystart="49" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1ac3e4aa1707d00d1ad31fef4cfea264c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cmatrix&lt; T &gt;::~cmatrix</definition>
        <argsstring>()</argsstring>
        <name>~cmatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="151" column="5" bodyfile="src/CMatrixConstructor.tpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a120f3aadc600c12d27f7f1ff9318ef9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; cmatrix&lt; T &gt;::rows_vec</definition>
        <argsstring>(const size_t &amp;n) const</argsstring>
        <name>rows_vec</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Get a row of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the row to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;T&gt; The row. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <computeroutput>rows</computeroutput> instead.</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="164" column="17" bodyfile="src/CMatrixGetter.tpp" bodystart="13" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a58925821c0eec27a19624434974ad7e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; cmatrix&lt; T &gt;::columns_vec</definition>
        <argsstring>(const size_t &amp;n) const</argsstring>
        <name>columns_vec</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Get a column of the matrix as a flattened vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the column to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;T&gt; The column as a flattened vector. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <computeroutput>columns</computeroutput> instead.</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="175" column="17" bodyfile="src/CMatrixGetter.tpp" bodystart="20" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a9b20cd286afd659056cf947e177437dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::rows</definition>
        <argsstring>(const size_t &amp;ids) const</argsstring>
        <name>rows</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
<para>Get the rows of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ids</parametername>
</parameternamelist>
<parameterdescription>
<para>The indexes of the rows to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The rows of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="186" column="13" bodyfile="src/CMatrixGetter.tpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1ae167e74efe10f452e59573b49fd9c8d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::rows</definition>
        <argsstring>(const std::initializer_list&lt; size_t &gt; &amp;ids) const</argsstring>
        <name>rows</name>
        <param>
          <type>const std::initializer_list&lt; size_t &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
<para>Get the rows of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ids</parametername>
</parameternamelist>
<parameterdescription>
<para>The indexes of the rows to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The rows of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="196" column="13" bodyfile="src/CMatrixGetter.tpp" bodystart="41" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a526f1027d8c2457f8d2ee041c3542261" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::columns</definition>
        <argsstring>(const size_t &amp;ids) const</argsstring>
        <name>columns</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
<para>Get the columns of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ids</parametername>
</parameternamelist>
<parameterdescription>
<para>The indexes of the columns to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The columns of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="206" column="13" bodyfile="src/CMatrixGetter.tpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a78b573432e56057130fca42c7deea53f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::columns</definition>
        <argsstring>(const std::initializer_list&lt; size_t &gt; &amp;ids) const</argsstring>
        <name>columns</name>
        <param>
          <type>const std::initializer_list&lt; size_t &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
<para>Get the columns of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ids</parametername>
</parameternamelist>
<parameterdescription>
<para>The indexes of the columns to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The columns of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="216" column="13" bodyfile="src/CMatrixGetter.tpp" bodystart="61" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1ac4d1db23d0917d2c24959fda156f2d3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::cells</definition>
        <argsstring>(const size_t &amp;row, const size_t &amp;col) const</argsstring>
        <name>cells</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Get the cells of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>The row of the cell to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column of the cell to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The cells of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="227" column="13" bodyfile="src/CMatrixGetter.tpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a05a084faf17f2bbe7d6e8c93ab9122cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::cells</definition>
        <argsstring>(const std::initializer_list&lt; std::pair&lt; size_t, size_t &gt;&gt; &amp;ids) const</argsstring>
        <name>cells</name>
        <param>
          <type>const std::initializer_list&lt; std::pair&lt; size_t, size_t &gt;&gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
<para>Get the cells of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ids</parametername>
</parameternamelist>
<parameterdescription>
<para>The indexes of the cells to get. (row, column) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The cells of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="237" column="13" bodyfile="src/CMatrixGetter.tpp" bodystart="87" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a62b2c0ff0ee5c36e056d9c414e546097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; cmatrix&lt; T &gt;::cell</definition>
        <argsstring>(const size_t &amp;row, const size_t &amp;col)</argsstring>
        <name>cell</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Get the reference to a cell of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>The row of the cell to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column of the cell to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T The reference of the cell. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="248" column="7" bodyfile="src/CMatrixGetter.tpp" bodystart="99" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a7af0450ebbed50469426663cb980e468" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T cmatrix&lt; T &gt;::cell</definition>
        <argsstring>(const size_t &amp;row, const size_t &amp;col) const</argsstring>
        <name>cell</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Get a cell of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>The row of the cell to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column of the cell to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T The cell. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="259" column="7" bodyfile="src/CMatrixGetter.tpp" bodystart="107" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a16147aad3ce464f611834ce2dc4d302c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cmatrix&lt; T &gt;::dim_h</definition>
        <argsstring>() const</argsstring>
        <name>dim_h</name>
        <briefdescription>
<para>The number of columns of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t The number of columns. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="268" column="12" bodyfile="src/CMatrixGetter.tpp" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a2b5c25d8a931cb75cf41a1799c9379a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cmatrix&lt; T &gt;::dim_v</definition>
        <argsstring>() const</argsstring>
        <name>dim_v</name>
        <briefdescription>
<para>The number of rows of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t The number of rows. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="276" column="12" bodyfile="src/CMatrixGetter.tpp" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1ae5e66e4f804d2e39efee0cce42044b46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; size_t, size_t &gt;</type>
        <definition>std::pair&lt; size_t, size_t &gt; cmatrix&lt; T &gt;::dim</definition>
        <argsstring>() const</argsstring>
        <name>dim</name>
        <briefdescription>
<para>The dimensions of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::pair&lt;size_t, size_t&gt; The number of rows and columns. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="284" column="15" bodyfile="src/CMatrixGetter.tpp" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1aa65881168e99756c64bf3bb312bee473" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::transpose</definition>
        <argsstring>() const</argsstring>
        <name>transpose</name>
        <briefdescription>
<para>Get the transpose of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>cmatrix&lt;T&gt; The transpose of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="293" column="13" bodyfile="src/CMatrixGetter.tpp" bodystart="139" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1aa81bdefe0a9fb42d756bf5f0ed3dc13f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; cmatrix&lt; T &gt;::diag</definition>
        <argsstring>() const</argsstring>
        <name>diag</name>
        <briefdescription>
<para>Get the diagonal of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;T&gt; The diagonal of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="301" column="17" bodyfile="src/CMatrixGetter.tpp" bodystart="153" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a596d8caaf1cfa941f219165d4785c5b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::set_row</definition>
        <argsstring>(const size_t &amp;n, const std::vector&lt; T &gt; &amp;val)</argsstring>
        <name>set_row</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set a row of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the row to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the size of the vector <computeroutput>val</computeroutput> is not equal to the number of columns of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The row must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="315" column="10" bodyfile="src/CMatrixSetter.tpp" bodystart="13" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a34307cea63ad628011a2e82f602e317d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::set_column</definition>
        <argsstring>(const size_t &amp;n, const std::vector&lt; T &gt; &amp;val)</argsstring>
        <name>set_column</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set a column of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the column to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the size of the vector <computeroutput>val</computeroutput> is not equal to the number of rows of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The column must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="327" column="10" bodyfile="src/CMatrixSetter.tpp" bodystart="21" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1adf82974e0924829b8fb93f4a2390287b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::set_cell</definition>
        <argsstring>(const size_t &amp;row, const size_t &amp;col, const T &amp;val)</argsstring>
        <name>set_cell</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set a cell of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>The row of the cell to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column of the cell to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The cell must be of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="339" column="10" bodyfile="src/CMatrixSetter.tpp" bodystart="32" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a03cf147efe0e0642bf4e31c8d693be66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::set_diag</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;val)</argsstring>
        <name>set_diag</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set the diagonal of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The diagonal to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the size of the vector <computeroutput>val</computeroutput> is not equal to the minimum of the number of rows and columns of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The diagonal must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="349" column="10" bodyfile="src/CMatrixSetter.tpp" bodystart="40" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1ga7197a96a81f8cc920f7bdd97c4c67f62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::insert_row</definition>
        <argsstring>(const size_t &amp;pos, const std::vector&lt; T &gt; &amp;val)</argsstring>
        <name>insert_row</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Insert a column in the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the column to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to insert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the size of the vector <computeroutput>val</computeroutput> is not equal to the number of rows of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The column must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="363" column="10" bodyfile="src/CMatrixManipulation.tpp" bodystart="13" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1gaa38db9639415363455d48cab1be0a253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::insert_column</definition>
        <argsstring>(const size_t &amp;pos, const std::vector&lt; T &gt; &amp;val)</argsstring>
        <name>insert_column</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Insert a row in the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the row to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to insert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the size of the vector <computeroutput>val</computeroutput> is not equal to the number of columns of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The row must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="375" column="10" bodyfile="src/CMatrixManipulation.tpp" bodystart="32" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1ga65d220edf6f5ca2eab34d94477afa826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::push_row_front</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;val)</argsstring>
        <name>push_row_front</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push a row in the front of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The row to push. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the size of the vector <computeroutput>val</computeroutput> is not equal to the number of columns of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The row must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="385" column="10" bodyfile="src/CMatrixManipulation.tpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1gab66903c4ed2ebd6957e9149e96bcb07e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::push_row_back</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;val)</argsstring>
        <name>push_row_back</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push a row in the back of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The row to push. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the size of the vector <computeroutput>val</computeroutput> is not equal to the number of columns of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The row must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="395" column="10" bodyfile="src/CMatrixManipulation.tpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1gadd89b01da658da557ca8ccd15375129e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::push_col_front</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;val)</argsstring>
        <name>push_col_front</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push a column in the front of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The column to push. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the size of the vector <computeroutput>val</computeroutput> is not equal to the number of rows of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The column must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="406" column="10" bodyfile="src/CMatrixManipulation.tpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1ga4aa7f5e61d48d761968a732d5cf2fb95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::push_col_back</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;val)</argsstring>
        <name>push_col_back</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push a column in the back of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The column to push. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the size of the vector <computeroutput>val</computeroutput> is not equal to the number of rows of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The column must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="416" column="10" bodyfile="src/CMatrixManipulation.tpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1ga5d0ec712500fcec28bb3f9963ab7f120" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cmatrix&lt; T &gt;::find_row</definition>
        <argsstring>(const std::function&lt; bool(std::vector&lt; T &gt;)&gt; &amp;f) const</argsstring>
        <name>find_row</name>
        <param>
          <type>const std::function&lt; bool(std::vector&lt; T &gt;)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>@bried Find the first row matching the condition.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition to satisfy. f(std::vector&lt;T&gt; row) -&gt; bool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int The first index of the row. -1 if not found.</para>
</simplesect>
<simplesect kind="note"><para>The empty matrix always return -1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="427" column="9" bodyfile="src/CMatrixManipulation.tpp" bodystart="88" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1ga836a2ada7ca93ec9fdc569c309371266" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cmatrix&lt; T &gt;::find_row</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;val) const</argsstring>
        <name>find_row</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Find the first row matching the given row. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The row to find. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int The first index of the row. -1 if not found.</para>
</simplesect>
<simplesect kind="note"><para>The row must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="437" column="9" bodyfile="src/CMatrixManipulation.tpp" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1ga48370e130446b1fa949c121ac949072f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cmatrix&lt; T &gt;::find_column</definition>
        <argsstring>(const std::function&lt; bool(std::vector&lt; T &gt;)&gt; &amp;f) const</argsstring>
        <name>find_column</name>
        <param>
          <type>const std::function&lt; bool(std::vector&lt; T &gt;)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Find the first column matching the condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition to satisfy. f(std::vector&lt;T&gt; col) -&gt; bool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int The first index of the column. -1 if not found.</para>
</simplesect>
<simplesect kind="note"><para>The empty matrix always return -1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="447" column="9" bodyfile="src/CMatrixManipulation.tpp" bodystart="106" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1ga3f95c6473de06bf3e05202fb9f6b560f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cmatrix&lt; T &gt;::find_column</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;val) const</argsstring>
        <name>find_column</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Find the first column matching the given column. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The column to find. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int The first index of the row. -1 if not found.</para>
</simplesect>
<simplesect kind="note"><para>The column must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="457" column="9" bodyfile="src/CMatrixManipulation.tpp" bodystart="117" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1gaaa137c74b74786feaf099387b68c85d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; int, int &gt;</type>
        <definition>std::tuple&lt; int, int &gt; cmatrix&lt; T &gt;::find</definition>
        <argsstring>(const std::function&lt; bool(T)&gt; &amp;f) const</argsstring>
        <name>find</name>
        <param>
          <type>const std::function&lt; bool(T)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Find the first cell matching the condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition to satisfy. f(T value) -&gt; bool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;int, int&gt; The first index of the cell. (-1, -1) if not found.</para>
</simplesect>
<simplesect kind="note"><para>The empty matrix always return (-1, -1). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="467" column="16" bodyfile="src/CMatrixManipulation.tpp" bodystart="124" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1gabc019c1a9385c01d8549d6892a70252a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; int, int &gt;</type>
        <definition>std::tuple&lt; int, int &gt; cmatrix&lt; T &gt;::find</definition>
        <argsstring>(const T &amp;val) const</argsstring>
        <name>find</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Find the first cell matching the given cell. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The cell to find. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;int, int&gt; The first index of the cell. (-1, -1) if not found.</para>
</simplesect>
<simplesect kind="note"><para>The cell must be of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="477" column="16" bodyfile="src/CMatrixManipulation.tpp" bodystart="136" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1ga08d679330da1629a2f742ba58262132e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::remove_row</definition>
        <argsstring>(const size_t &amp;n)</argsstring>
        <name>remove_row</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Remove a row of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the row to remove. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrix is empty. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="487" column="10" bodyfile="src/CMatrixManipulation.tpp" bodystart="146" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1gab85773fe1e9b38d7ad76a3612d5535d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::remove_column</definition>
        <argsstring>(const size_t &amp;n)</argsstring>
        <name>remove_column</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Remove a column of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the column to remove. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrix is empty. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="496" column="10" bodyfile="src/CMatrixManipulation.tpp" bodystart="153" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1gaffc2a1e81d350c25e5779afe1aab8da8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::is_empty</definition>
        <argsstring>() const</argsstring>
        <name>is_empty</name>
        <briefdescription>
<para>Check if the matrix is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true If the matrix is empty. </para>
</simplesect>
<simplesect kind="return"><para>false If the matrix is not empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="507" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1gaef41d2fe33a969498b7c3fb3c58404fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::is_square</definition>
        <argsstring>() const</argsstring>
        <name>is_square</name>
        <briefdescription>
<para>Check if the matrix is a square matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true If the matrix is a square matrix. </para>
</simplesect>
<simplesect kind="return"><para>false If the matrix is not a square matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="516" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="19" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga13dbea9de0c151a9a166f5574a4051ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::is_diag</definition>
        <argsstring>() const</argsstring>
        <name>is_diag</name>
        <briefdescription>
<para>Check if the matrix is a diagonal matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true If the matrix is a diagonal matrix. </para>
</simplesect>
<simplesect kind="return"><para>false If the matrix is not a diagonal matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="525" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga54e28932a02aa0b6e1afa386f7b8d862" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::is_identity</definition>
        <argsstring>() const</argsstring>
        <name>is_identity</name>
        <briefdescription>
<para>Check if the matrix is the identity matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true If the matrix is the identity matrix. </para>
</simplesect>
<simplesect kind="return"><para>false If the matrix is not the identity matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="534" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga1931e131bdcbb2c60fc590d43819e45b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::is_symetric</definition>
        <argsstring>() const</argsstring>
        <name>is_symetric</name>
        <briefdescription>
<para>Check if the matrix is a symmetric matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true If the matrix is a symmetric matrix. </para>
</simplesect>
<simplesect kind="return"><para>false If the matrix is not a symmetric matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="543" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga5b4e6176e32373a4469176dfe47395c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::is_triangular_up</definition>
        <argsstring>() const</argsstring>
        <name>is_triangular_up</name>
        <briefdescription>
<para>Check if the matrix is an upper triangular matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true If the matrix is an upper triangular matrix. </para>
</simplesect>
<simplesect kind="return"><para>false If the matrix is not an upper triangular matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="552" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="43" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1gae8a562b5206d07705f63b045c785f3df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::is_triangular_low</definition>
        <argsstring>() const</argsstring>
        <name>is_triangular_low</name>
        <briefdescription>
<para>Check if the matrix is a lower triangular matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true If the matrix is a lower triangular matrix. </para>
</simplesect>
<simplesect kind="return"><para>false If the matrix is not a lower triangular matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="561" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="60" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga038bb07f84a685d96432069b22c54a4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::all</definition>
        <argsstring>(const std::function&lt; bool(T)&gt; &amp;f) const</argsstring>
        <name>all</name>
        <param>
          <type>const std::function&lt; bool(T)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Check if all the cells of the matrix satisfy a condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition to satisfy. f(T value) -&gt; bool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If all the cells satisfy the condition. </para>
</simplesect>
<simplesect kind="return"><para>false If at least one cell does not satisfy the condition.</para>
</simplesect>
<simplesect kind="note"><para>The empty matrix always return true. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="572" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="77" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga612f4e71b55d4a877dd2f2cbb02feef5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::all</definition>
        <argsstring>(const T &amp;val) const</argsstring>
        <name>all</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Check if all the cells of the matrix are equal to a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If all the cells are equal to the value. </para>
</simplesect>
<simplesect kind="return"><para>false If at least one cell is not equal to the value.</para>
</simplesect>
<simplesect kind="note"><para>The empty matrix always return true. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="583" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga4d5d0b0bfa1aa1c88c307ef77582d4a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::any</definition>
        <argsstring>(const std::function&lt; bool(T)&gt; &amp;f) const</argsstring>
        <name>any</name>
        <param>
          <type>const std::function&lt; bool(T)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Check if at least one cell of the matrix satisfy a condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition to satisfy. f(T value) -&gt; bool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If at least one cell satisfy the condition. </para>
</simplesect>
<simplesect kind="return"><para>false If all the cells does not satisfy the condition.</para>
</simplesect>
<simplesect kind="note"><para>The empty matrix always return false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="594" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="96" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga34480288ea74528d4cc9edc1127b0755" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::any</definition>
        <argsstring>(const T &amp;val) const</argsstring>
        <name>any</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Check if at least one cell of the matrix is equal to a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If at least one cell is equal to the value. </para>
</simplesect>
<simplesect kind="return"><para>false If all the cells are not equal to the value.</para>
</simplesect>
<simplesect kind="note"><para>The empty matrix always return false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="605" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1gae9938af2836a38a1ce92931761f28bd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_dim</definition>
        <argsstring>(const std::tuple&lt; size_t, size_t &gt; &amp;dim) const</argsstring>
        <name>check_dim</name>
        <param>
          <type>const std::tuple&lt; size_t, size_t &gt; &amp;</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>Check if dimensions are equals to the dimensions of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertical and horizontal dimensions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the dimensions are not equals to the dimensions of the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="615" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="118" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1gabe81ed6d34cd62c48307ee52c2f5f224" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_dim</definition>
        <argsstring>(const cmatrix&lt; T &gt; &amp;m) const</argsstring>
        <name>check_dim</name>
        <param>
          <type>const <ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Check if dimensions are equals to the dimensions of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the dimensions are not equals to the dimensions of the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="624" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga5e629f6f593f4c033be7cf0af0a4ae41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_valid_row</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;row) const</argsstring>
        <name>check_valid_row</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>row</declname>
        </param>
        <briefdescription>
<para>Check if the vector is a valid row of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>The row to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the vector is not a valid row of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The row must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="634" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="138" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga9cd60c00a168a221023a443b38a3e03b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_valid_col</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;col) const</argsstring>
        <name>check_valid_col</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Check if the vector is a valid column of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the vector is not a valid column of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The column must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="644" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="148" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga32c7753039690064f4add5d732abb471" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_valid_diag</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;diag) const</argsstring>
        <name>check_valid_diag</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>diag</declname>
        </param>
        <briefdescription>
<para>Check if the diagonal is a valid diagonal of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>diag</parametername>
</parameternamelist>
<parameterdescription>
<para>The diagonal to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the vector is not a valid diagonal of the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="653" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="158" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga881b5363edb1837074fcb77db888aa64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_valid_row_id</definition>
        <argsstring>(const size_t &amp;n) const</argsstring>
        <name>check_valid_row_id</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Check if the row is a valid row index of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>The row index to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the row is not a valid row index of the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="662" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="169" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga6c5e30bf1ce1e521de73ceb4a8941f7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_valid_col_id</definition>
        <argsstring>(const size_t &amp;n) const</argsstring>
        <name>check_valid_col_id</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Check if the column is a valid column index of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column index to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the column is not a valid column index of the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="671" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="179" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga23ed75b6b8696b6623c825c3f6a1c3d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_expected_id</definition>
        <argsstring>(const size_t &amp;n, const size_t &amp;expected) const</argsstring>
        <name>check_expected_id</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>expected</declname>
        </param>
        <briefdescription>
<para>Check if the index is expected. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is not the expected index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="681" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="201" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1gab9eac978cc396e75413eeb87109a5f70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_expected_id</definition>
        <argsstring>(const size_t &amp;n, const size_t &amp;expectedBegin, const size_t &amp;exepectedEnd) const</argsstring>
        <name>check_expected_id</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>expectedBegin</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>exepectedEnd</declname>
        </param>
        <briefdescription>
<para>Check if the index is expected. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expectedBegin</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected begin index inclusive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exepectedEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected end index inlusive. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is not the expected index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="692" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="189" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga0dd6598a5bea25c9e3bfc74327209170" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_valid_type</definition>
        <argsstring>() const</argsstring>
        <name>check_valid_type</name>
        <briefdescription>
<para>Check if the type of the matrix is valid. List of types not supported: bool. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the type is invalid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="701" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="207" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1ga3c8279aee30a6f9d45c796c2f4902142" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::min</definition>
        <argsstring>(const unsigned int &amp;axis=0) const</argsstring>
        <name>min</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the minimum value for each row (axis: 0) or column (axis: 1) of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the minimum value. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The minimum value for each row or column of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the axis is not 0 or 1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The type of the matrix must implement the operator &lt;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="714" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="10" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1ga3f9384e591534cdb81d8671d5e2d8b85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::max</definition>
        <argsstring>(const unsigned int &amp;axis=0) const</argsstring>
        <name>max</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the maximum value for each row (axis: 0) or column (axis: 1) of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the maximum value. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The maximum value for each row or column of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the axis is not 0 or 1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The type of the matrix must implement the operator &gt;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="725" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="53" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1ga2d88b49033aeb45479fcf602e9598a12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::sum</definition>
        <argsstring>(const unsigned int &amp;axis=0, const T &amp;zero=T()) const</argsstring>
        <name>sum</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>zero</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>Get the sum of the matrix for each row (axis: 0) or column (axis: 1) of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the sum. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zero</parametername>
</parameternamelist>
<parameterdescription>
<para>The zero value of the sum. (default: the value of the default constructor of the type T) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The sum of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the axis is not 0 or 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="736" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="106" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1ga36aeafd654daf1dea7e3f6db5eae4c62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; float &gt;</type>
        <definition>cmatrix&lt; float &gt; cmatrix&lt; T &gt;::mean</definition>
        <argsstring>(const unsigned int &amp;axis=0) const</argsstring>
        <name>mean</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the mean value for each row (axis: 0) or column (axis: 1) of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the mean value. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;float&gt; The mean value for each row or column of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the axis is not 0 or 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrix is not arithmetic.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The matrix must be of arithmetic type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="748" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1ga9a5e05c5fb874e9cebcfe689277016c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; float &gt;</type>
        <definition>cmatrix&lt; float &gt; cmatrix&lt; T &gt;::std</definition>
        <argsstring>(const unsigned int &amp;axis=0) const</argsstring>
        <name>std</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the standard deviation value for each row (axis: 0) or column (axis: 1) of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the standard deviation. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;float&gt; The standard deviation for each row or column of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the axis is not 0 or 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrix is not arithmetic. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the number of elements is less than 2 for the axis.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The matrix must be of arithmetic type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="761" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1ga30526abba0a7d993cf12bd9847eb9ce0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::median</definition>
        <argsstring>(const unsigned int &amp;axis=0) const</argsstring>
        <name>median</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the median value for each row (axis: 0) or column (axis: 1) of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the median value. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The median value of the matrix for each row or column of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the axis is not 0 or 1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The matrix must implement the operator &lt;. </para>
</simplesect>
<simplesect kind="note"><para>If the number of elements is even, the median is the smallest value of the two middle values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="773" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="255" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1ga0a4525e6c737050e759f753c00001666" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::print</definition>
        <argsstring>() const</argsstring>
        <name>print</name>
        <briefdescription>
<para>Print the matrix in the standard output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="781" column="10" bodyfile="src/CMatrix.tpp" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1ga1766cb6d6c5f9c0f593aafd056b59d52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clear the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="787" column="10" bodyfile="src/CMatrix.tpp" bodystart="19" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1gadabfe43fa749744cf8ee5ad12a3f13cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::copy</definition>
        <argsstring>() const</argsstring>
        <name>copy</name>
        <briefdescription>
<para>Copy the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>cmatrix&lt;T&gt; The copied matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="795" column="13" bodyfile="src/CMatrix.tpp" bodystart="25" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1gaaa4ca3ea57ca8b7c41d2fc90c1913099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::apply</definition>
        <argsstring>(const std::function&lt; T(T, size_t *, size_t *)&gt; &amp;f, size_t *col=nullptr, size_t *row=nullptr)</argsstring>
        <name>apply</name>
        <param>
          <type>const std::function&lt; T(T, size_t *, size_t *)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>col</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>size_t *</type>
          <declname>row</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Apply a function to each cell of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to apply. f(T value, size_t *id_col, size_t *id_row) -&gt; T </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the column index. (default: nullptr) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the row index. (default: nullptr) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="805" column="10" bodyfile="src/CMatrix.tpp" bodystart="37" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1gad65689b82797403b62c13d7d4eeee6b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::apply</definition>
        <argsstring>(const std::function&lt; T(T)&gt; &amp;f)</argsstring>
        <name>apply</name>
        <param>
          <type>const std::function&lt; T(T)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Apply a function to each cell of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to apply. f(T value) -&gt; T </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="813" column="10" bodyfile="src/CMatrix.tpp" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1ga2caab6666627a6fdf4d31f14716d5f08" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::map</definition>
        <argsstring>(const std::function&lt; T(T, size_t *, size_t *)&gt; &amp;f, size_t *col=nullptr, size_t *row=nullptr) const</argsstring>
        <name>map</name>
        <param>
          <type>const std::function&lt; T(T, size_t *, size_t *)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>col</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>size_t *</type>
          <declname>row</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Apply a function to each cell of the matrix and return the result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to apply. f(T value, size_t *id_col, size_t *id_row) -&gt; T </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the column index. (default: nullptr) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the row index. (default: nullptr) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The result of the function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="824" column="13" bodyfile="src/CMatrix.tpp" bodystart="64" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1gaec11f70e818f918e023fd091306204ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::map</definition>
        <argsstring>(const std::function&lt; T(T)&gt; &amp;f) const</argsstring>
        <name>map</name>
        <param>
          <type>const std::function&lt; T(T)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Apply a function to each cell of the matrix and return the result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to apply. f(T value) -&gt; T </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The result of the function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="833" column="13" bodyfile="src/CMatrix.tpp" bodystart="72" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1ga70ed516d04d245c16f3bda79284f000b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::fill</definition>
        <argsstring>(const T &amp;val)</argsstring>
        <name>fill</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Fill the matrix with a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to fill the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="841" column="10" bodyfile="src/CMatrix.tpp" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1ga632bae1f8b175c072f8641c46ec9ff1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; T &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; T &gt; &gt; cmatrix&lt; T &gt;::to_vector</definition>
        <argsstring>() const</argsstring>
        <name>to_vector</name>
        <briefdescription>
<para>Convert the matrix to a vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;T&gt; The vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="849" column="17" bodyfile="src/CMatrix.tpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__general_1ga1e8370d047a279c67ca8727a80d8bfd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; U &gt;</type>
        <definition>cmatrix&lt; U &gt; cmatrix&lt; T &gt;::cast</definition>
        <argsstring>() const</argsstring>
        <name>cast</name>
        <briefdescription>
<para>Convert the matrix to a matrix of another type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix<underline> The matrix of another type. </underline></para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para><underline>If the type T is not convertible to the type U. </underline></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="860" column="13" bodyfile="src/CMatrix.tpp" bodystart="94" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1ad5602f092d4a29ff7a658f8deae842f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
        <definition>cmatrix&lt; T &gt; &amp; cmatrix&lt; T &gt;::operator=</definition>
        <argsstring>(const std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; &amp;m)</argsstring>
        <name>operator=</name>
        <param>
          <type>const std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>The assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt;&amp; The copied matrix.</para>
</simplesect>
<simplesect kind="note"><para>The matrix must be of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="924" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a2ba4179e76358649640f200557dc5fdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
        <definition>cmatrix&lt; T &gt; &amp; cmatrix&lt; T &gt;::operator=</definition>
        <argsstring>(const cmatrix&lt; T &gt; &amp;m)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>The assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt;&amp; The copied matrix.</para>
</simplesect>
<simplesect kind="note"><para>The matrix must be of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="934" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="13" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a753ea3b2926b3e56e96c6976ad0986b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::operator==</definition>
        <argsstring>(const cmatrix&lt; T &gt; &amp;m) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>The equality operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If the matrices are equal. </para>
</simplesect>
<simplesect kind="return"><para>false If the matrices are not equal.</para>
</simplesect>
<simplesect kind="note"><para>The matrix must be of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="945" column="10" bodyfile="src/CMatrixOperator.tpp" bodystart="33" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1ad96fe7397082bf6663ff696760b8b427" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::operator!=</definition>
        <argsstring>(const cmatrix&lt; T &gt; &amp;m) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>The inequality operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If the matrices are not equal. </para>
</simplesect>
<simplesect kind="return"><para>false If the matrices are equal.</para>
</simplesect>
<simplesect kind="note"><para>The matrix must be of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="956" column="10" bodyfile="src/CMatrixOperator.tpp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a6588010507da10c54d2cd842d9dba04e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; short unsigned int &gt;</type>
        <definition>cmatrix&lt; short unsigned int &gt; cmatrix&lt; T &gt;::operator==</definition>
        <argsstring>(const T &amp;n) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const T &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>The equality operator comparing the matrix with a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;short unsigned int&gt; The matrix of booleans. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="965" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a9ccb564da5f7a36986b8ad9bf0a16e82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; short unsigned int &gt;</type>
        <definition>cmatrix&lt; short unsigned int &gt; cmatrix&lt; T &gt;::operator!=</definition>
        <argsstring>(const T &amp;n) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const T &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>The inequality operator comparing the matrix with a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;short unsigned int&gt; The matrix of booleans. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="974" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a1aff6fb5ecfbcd0a0599a859bc08be17" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; short unsigned int &gt;</type>
        <definition>cmatrix&lt; short unsigned int &gt; cmatrix&lt; T &gt;::operator&lt;</definition>
        <argsstring>(const T &amp;n) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>The strictly less than operator comparing the matrix with a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;short unsigned int&gt; The matrix of booleans. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="974" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1ab98cd083af62c7e24902297168a07f6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; short unsigned int &gt;</type>
        <definition>cmatrix&lt; short unsigned int &gt; cmatrix&lt; T &gt;::operator&lt;=</definition>
        <argsstring>(const T &amp;n) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const T &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>The less than operator comparing the matrix with a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;short unsigned int&gt; The matrix of booleans. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="974" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a7e1e523c1c1076c3e99277df617e791f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; short unsigned int &gt;</type>
        <definition>cmatrix&lt; short unsigned int &gt; cmatrix&lt; T &gt;::operator&gt;</definition>
        <argsstring>(const T &amp;n) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>The strictly greater than operator comparing the matrix with a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;short unsigned int&gt; The matrix of booleans. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1001" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1aae08ad609f0e4f7d2fa8f537ebfb3873" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; short unsigned int &gt;</type>
        <definition>cmatrix&lt; short unsigned int &gt; cmatrix&lt; T &gt;::operator&gt;=</definition>
        <argsstring>(const T &amp;n) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const T &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>The greater than operator comparing the matrix with a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;short unsigned int&gt; The matrix of booleans. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1010" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a09333fa02a60b3027acd956b3d5e6cfb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::operator+</definition>
        <argsstring>(const cmatrix&lt; T &gt; &amp;m) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>The addition operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The sum of the matrices.</para>
</simplesect>
<simplesect kind="note"><para>The matrix must be of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1032" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a5fc856b4301b58f6e35ccb0781acae64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::operator+</definition>
        <argsstring>(const T &amp;n) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const T &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>The addition operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The sum of the matrices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1041" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="100" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a052bc5538cb8c686505e09c2a243b6f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::operator-</definition>
        <argsstring>(const cmatrix&lt; T &gt; &amp;m) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>The subtraction operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to subtract. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The difference of the matrices.</para>
</simplesect>
<simplesect kind="note"><para>The matrix must be of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1051" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a715fa7b609ad3292acdcc61683a32207" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::operator-</definition>
        <argsstring>(const T &amp;val) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>The subtraction operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to subtract. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The difference of the matrices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1060" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="113" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1aaea4c724f5a18c4021919007cce133ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::operator*</definition>
        <argsstring>(const cmatrix&lt; T &gt; &amp;m) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>The multiplication operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to multiply. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The product of the matrices.</para>
</simplesect>
<simplesect kind="note"><para>The matrix must be of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1070" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="120" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a5c183ea42da70d2c2f406f5d92f6b6df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::operator*</definition>
        <argsstring>(const T &amp;n) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>The multiplication operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to multiply. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The product of the matrices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1079" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="152" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a95a5b75198349687f8c7bef9482f2684" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::operator/</definition>
        <argsstring>(const T &amp;n) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const T &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>The division operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to divide. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The quotient of the matrices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1088" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="159" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1ab9c7d4c8f8b9736333309c786bb20606" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::operator^</definition>
        <argsstring>(const unsigned int &amp;m) const</argsstring>
        <name>operator^</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>The power operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The power. Must be a positive integer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The powered matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrix is not a square matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1098" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="169" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a00d022f9702e1d35b6e89d06fd1da7c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
        <definition>cmatrix&lt; T &gt; &amp; cmatrix&lt; T &gt;::operator+=</definition>
        <argsstring>(const cmatrix&lt; T &gt; &amp;m)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>The addition assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt;&amp; The sum of the matrices.</para>
</simplesect>
<simplesect kind="note"><para>The matrix must be of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1108" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1aa72bb4e820e69e62d81e25402eb4aace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
        <definition>cmatrix&lt; T &gt; &amp; cmatrix&lt; T &gt;::operator+=</definition>
        <argsstring>(const T &amp;n)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const T &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>The addition assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt;&amp; The sum of the matrices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1117" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1ac5f5919d4a255dc3ae0ea9405bdf5ad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
        <definition>cmatrix&lt; T &gt; &amp; cmatrix&lt; T &gt;::operator-=</definition>
        <argsstring>(const cmatrix&lt; T &gt; &amp;m)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>The subtraction assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to subtract. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt;&amp; The difference of the matrices.</para>
</simplesect>
<simplesect kind="note"><para>The matrix must be of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1127" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1abe87d7acb78480726882065f7bbc50ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
        <definition>cmatrix&lt; T &gt; &amp; cmatrix&lt; T &gt;::operator-=</definition>
        <argsstring>(const T &amp;n)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const T &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>The subtraction assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to subtract. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt;&amp; The difference of the matrices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1136" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a475554fb38a955bebb111e0b2be8541f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
        <definition>cmatrix&lt; T &gt; &amp; cmatrix&lt; T &gt;::operator*=</definition>
        <argsstring>(const cmatrix&lt; T &gt; &amp;m)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>The multiplication assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to multiply. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt;&amp; The product of the matrices.</para>
</simplesect>
<simplesect kind="note"><para>The matrix must be of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1146" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1ad5e8ed21d52c5251e287f210de4f7aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
        <definition>cmatrix&lt; T &gt; &amp; cmatrix&lt; T &gt;::operator*=</definition>
        <argsstring>(const T &amp;n)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const T &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>The multiplication assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to multiply. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt;&amp; The product of the matrices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1155" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1afa0384704492f7a22fc67863ade82469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
        <definition>cmatrix&lt; T &gt; &amp; cmatrix&lt; T &gt;::operator/=</definition>
        <argsstring>(const T &amp;n)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const T &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>The division assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to divide. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt;&amp; The quotient of the matrices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1164" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a7a6ae7a2937f9ec599e14e4bcfbcb9c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
        <definition>cmatrix&lt; T &gt; &amp; cmatrix&lt; T &gt;::operator^=</definition>
        <argsstring>(const unsigned int &amp;m)</argsstring>
        <name>operator^=</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>The power assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The power. Must be a positive integer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt;&amp; The powered matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrix is not a square matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1174" column="13" bodyfile="src/CMatrixOperator.tpp" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a68100a6e0887d417b25c09298e1bd682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; int &gt;</type>
        <definition>cmatrix&lt; int &gt; cmatrix&lt; int &gt;::randint</definition>
        <argsstring>(const size_t &amp;dim_v, const size_t &amp;dim_h, const int &amp;min, const int &amp;max, const int &amp;seed)</argsstring>
        <name>randint</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>dim_v</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>dim_h</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CMatrixStatic.tpp" line="13" column="17" bodyfile="src/CMatrixStatic.tpp" bodystart="13" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a36a34028ba6a94832270797e47b87c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; int &gt;</type>
        <definition>cmatrix&lt; int &gt; cmatrix&lt; int &gt;::zeros</definition>
        <argsstring>(const size_t &amp;dim_h, const size_t &amp;dim_v)</argsstring>
        <name>zeros</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>dim_h</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>dim_v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CMatrixStatic.tpp" line="34" column="17" bodyfile="src/CMatrixStatic.tpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a6d27a8af98d3034c56f7829e8892e456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; int &gt;</type>
        <definition>cmatrix&lt; int &gt; cmatrix&lt; int &gt;::identity</definition>
        <argsstring>(const size_t &amp;dim)</argsstring>
        <name>identity</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/CMatrixStatic.tpp" line="40" column="17" bodyfile="src/CMatrixStatic.tpp" bodystart="40" bodyend="45"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="group__static_1ga7198413962160f4f862d3c2dbbf7ebeb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::is_matrix</definition>
        <argsstring>(const std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; &amp;m)</argsstring>
        <name>is_matrix</name>
        <param>
          <type>const std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Check if a nested vector is a matrix. To be a matrix, all the rows and columns must have the same length. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The nested vector to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If the nested vector is a matrix. </para>
</simplesect>
<simplesect kind="return"><para>false If the nested vector is not a matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="872" column="17" bodyfile="src/CMatrixStatic.tpp" bodystart="51" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="group__static_1gadfe0fb6f26993a26a361d8663673865b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; cmatrix&lt; T &gt;::flatten_vector</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; T &gt;&gt; &amp;vec)</argsstring>
        <name>flatten_vector</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; T &gt;&gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Flatten a nested vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The nested vector to flatten. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;T&gt; The flattened vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="881" column="24" bodyfile="src/CMatrixStatic.tpp" bodystart="71" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="group__static_1gabd1f040eca612660113a96308d8a9ccc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; int &gt;</type>
        <definition>static cmatrix&lt;int&gt; cmatrix&lt; T &gt;::randint</definition>
        <argsstring>(const size_t &amp;dim_v, const size_t &amp;dim_h, const int &amp;min, const int &amp;max, const int &amp;seed=time(nullptr))</argsstring>
        <name>randint</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>dim_v</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>dim_h</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>seed</declname>
          <defval>time(nullptr)</defval>
        </param>
        <briefdescription>
<para>Generate a random matrix of integers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim_h</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rows. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim_v</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of columns. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum value of the matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum value of the matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>The seed of the random generator. (default: time(nullptr))</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;int&gt; The random matrix of integers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="895" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classcmatrix_1a96c97c592e9f8a1892b474a74b27dc40" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; int &gt;</type>
        <definition>static cmatrix&lt;int&gt; cmatrix&lt; T &gt;::zeros</definition>
        <argsstring>(const size_t &amp;dim_h, const size_t &amp;dim_v)</argsstring>
        <name>zeros</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>dim_h</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>dim_v</declname>
        </param>
        <briefdescription>
<para>Generate a matrix of zeros. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim_h</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of columns. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim_v</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rows. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;int&gt; The matrix of zeros. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="903" column="20"/>
      </memberdef>
      <memberdef kind="function" id="group__static_1ga919d94470dcdde36abf23379aa01af34" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; int &gt;</type>
        <definition>static cmatrix&lt;int&gt; cmatrix&lt; T &gt;::identity</definition>
        <argsstring>(const size_t &amp;dim)</argsstring>
        <name>identity</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>Generate the identity matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rows and columns. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;int&gt; The identity matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="912" column="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classcmatrix_1a3e881cfef7557e928a0e9eb62b7d7772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const cmatrix&lt; U &gt; &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; U &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>The output operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to print. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::ostream&amp; The output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="1022" column="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The main template class that can work with any data type except bool. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of elements in the cmatrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="include/CMatrix.hpp" line="27" column="1" bodyfile="include/CMatrix.hpp" bodystart="26" bodyend="1175"/>
    <listofallmembers>
      <member refid="classcmatrix_1a7a27f3def1551cb1220a7edc15e136a2" prot="private" virt="non-virtual"><scope>cmatrix</scope><name>__map_op_arithmetic</name></member>
      <member refid="classcmatrix_1a91ecd6a81bd2678c0553d321df0c3573" prot="private" virt="non-virtual"><scope>cmatrix</scope><name>__map_op_comparaison_val</name></member>
      <member refid="group__statistics_1gab9ff2abcabe6974a3412789c31c58d6e" prot="private" virt="non-virtual"><scope>cmatrix</scope><name>__mean</name></member>
      <member refid="group__statistics_1gab428ffa20b11d80e8b5cdea9bf7c92d1" prot="private" virt="non-virtual"><scope>cmatrix</scope><name>__mean</name></member>
      <member refid="group__statistics_1ga05dfe44daa6c03a8bac52dbc2a6656f8" prot="private" virt="non-virtual"><scope>cmatrix</scope><name>__std</name></member>
      <member refid="group__statistics_1ga423f15c24af04cdafd322f6243ff0dcd" prot="private" virt="non-virtual"><scope>cmatrix</scope><name>__std</name></member>
      <member refid="group__check_1ga038bb07f84a685d96432069b22c54a4b" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>all</name></member>
      <member refid="group__check_1ga612f4e71b55d4a877dd2f2cbb02feef5" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>all</name></member>
      <member refid="group__check_1ga4d5d0b0bfa1aa1c88c307ef77582d4a5" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>any</name></member>
      <member refid="group__check_1ga34480288ea74528d4cc9edc1127b0755" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>any</name></member>
      <member refid="group__general_1gaaa4ca3ea57ca8b7c41d2fc90c1913099" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>apply</name></member>
      <member refid="group__general_1gad65689b82797403b62c13d7d4eeee6b1" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>apply</name></member>
      <member refid="group__general_1ga1e8370d047a279c67ca8727a80d8bfd1" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>cast</name></member>
      <member refid="classcmatrix_1a62b2c0ff0ee5c36e056d9c414e546097" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>cell</name></member>
      <member refid="classcmatrix_1a7af0450ebbed50469426663cb980e468" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>cell</name></member>
      <member refid="classcmatrix_1ac4d1db23d0917d2c24959fda156f2d3d" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>cells</name></member>
      <member refid="classcmatrix_1a05a084faf17f2bbe7d6e8c93ab9122cd" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>cells</name></member>
      <member refid="group__check_1gae9938af2836a38a1ce92931761f28bd1" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>check_dim</name></member>
      <member refid="group__check_1gabe81ed6d34cd62c48307ee52c2f5f224" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>check_dim</name></member>
      <member refid="group__check_1ga23ed75b6b8696b6623c825c3f6a1c3d6" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>check_expected_id</name></member>
      <member refid="group__check_1gab9eac978cc396e75413eeb87109a5f70" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>check_expected_id</name></member>
      <member refid="group__check_1ga9cd60c00a168a221023a443b38a3e03b" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>check_valid_col</name></member>
      <member refid="group__check_1ga6c5e30bf1ce1e521de73ceb4a8941f7f" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>check_valid_col_id</name></member>
      <member refid="group__check_1ga32c7753039690064f4add5d732abb471" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>check_valid_diag</name></member>
      <member refid="group__check_1ga5e629f6f593f4c033be7cf0af0a4ae41" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>check_valid_row</name></member>
      <member refid="group__check_1ga881b5363edb1837074fcb77db888aa64" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>check_valid_row_id</name></member>
      <member refid="group__check_1ga0dd6598a5bea25c9e3bfc74327209170" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>check_valid_type</name></member>
      <member refid="group__general_1ga1766cb6d6c5f9c0f593aafd056b59d52" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>clear</name></member>
      <member refid="classcmatrix_1aac0edd8caac8b0ff2f9f02cddd3f9428" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>cmatrix</name></member>
      <member refid="classcmatrix_1a40154e7ad0df15f5f01cc1c7fff3df86" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>cmatrix</name></member>
      <member refid="classcmatrix_1adc7b866d102dc4bd8b9539fdd5dfc640" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>cmatrix</name></member>
      <member refid="classcmatrix_1a39c7266a95655c8c7e7047e1806be52d" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>cmatrix</name></member>
      <member refid="classcmatrix_1a4548d3427fe2306c3bdb8977a4e23224" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>cmatrix</name></member>
      <member refid="classcmatrix_1a526f1027d8c2457f8d2ee041c3542261" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>columns</name></member>
      <member refid="classcmatrix_1a78b573432e56057130fca42c7deea53f" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>columns</name></member>
      <member refid="classcmatrix_1a58925821c0eec27a19624434974ad7e9" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>columns_vec</name></member>
      <member refid="group__general_1gadabfe43fa749744cf8ee5ad12a3f13cf" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>copy</name></member>
      <member refid="classcmatrix_1aa81bdefe0a9fb42d756bf5f0ed3dc13f" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>diag</name></member>
      <member refid="classcmatrix_1ae5e66e4f804d2e39efee0cce42044b46" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>dim</name></member>
      <member refid="classcmatrix_1a16147aad3ce464f611834ce2dc4d302c" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>dim_h</name></member>
      <member refid="classcmatrix_1a2b5c25d8a931cb75cf41a1799c9379a3" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>dim_v</name></member>
      <member refid="group__general_1ga70ed516d04d245c16f3bda79284f000b" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>fill</name></member>
      <member refid="group__manipulation_1gaaa137c74b74786feaf099387b68c85d7" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>find</name></member>
      <member refid="group__manipulation_1gabc019c1a9385c01d8549d6892a70252a" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>find</name></member>
      <member refid="group__manipulation_1ga48370e130446b1fa949c121ac949072f" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>find_column</name></member>
      <member refid="group__manipulation_1ga3f95c6473de06bf3e05202fb9f6b560f" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>find_column</name></member>
      <member refid="group__manipulation_1ga5d0ec712500fcec28bb3f9963ab7f120" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>find_row</name></member>
      <member refid="group__manipulation_1ga836a2ada7ca93ec9fdc569c309371266" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>find_row</name></member>
      <member refid="group__static_1gadfe0fb6f26993a26a361d8663673865b" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>flatten_vector</name></member>
      <member refid="group__static_1ga919d94470dcdde36abf23379aa01af34" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>identity</name></member>
      <member refid="classcmatrix_1a6d27a8af98d3034c56f7829e8892e456" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>identity</name></member>
      <member refid="group__manipulation_1gaa38db9639415363455d48cab1be0a253" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>insert_column</name></member>
      <member refid="group__manipulation_1ga7197a96a81f8cc920f7bdd97c4c67f62" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>insert_row</name></member>
      <member refid="group__check_1ga13dbea9de0c151a9a166f5574a4051ed" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>is_diag</name></member>
      <member refid="group__check_1gaffc2a1e81d350c25e5779afe1aab8da8" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>is_empty</name></member>
      <member refid="group__check_1ga54e28932a02aa0b6e1afa386f7b8d862" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>is_identity</name></member>
      <member refid="group__static_1ga7198413962160f4f862d3c2dbbf7ebeb" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>is_matrix</name></member>
      <member refid="group__check_1gaef41d2fe33a969498b7c3fb3c58404fe" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>is_square</name></member>
      <member refid="group__check_1ga1931e131bdcbb2c60fc590d43819e45b" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>is_symetric</name></member>
      <member refid="group__check_1gae8a562b5206d07705f63b045c785f3df" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>is_triangular_low</name></member>
      <member refid="group__check_1ga5b4e6176e32373a4469176dfe47395c5" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>is_triangular_up</name></member>
      <member refid="group__general_1ga2caab6666627a6fdf4d31f14716d5f08" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>map</name></member>
      <member refid="group__general_1gaec11f70e818f918e023fd091306204ba" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>map</name></member>
      <member refid="classcmatrix_1a7e0f2a5a18601d9d5f9fc7c6ca80bf02" prot="private" virt="non-virtual"><scope>cmatrix</scope><name>matrix</name></member>
      <member refid="group__statistics_1ga3f9384e591534cdb81d8671d5e2d8b85" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>max</name></member>
      <member refid="group__statistics_1ga36aeafd654daf1dea7e3f6db5eae4c62" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>mean</name></member>
      <member refid="group__statistics_1ga30526abba0a7d993cf12bd9847eb9ce0" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>median</name></member>
      <member refid="group__statistics_1ga3c8279aee30a6f9d45c796c2f4902142" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>min</name></member>
      <member refid="classcmatrix_1ad96fe7397082bf6663ff696760b8b427" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator!=</name></member>
      <member refid="classcmatrix_1a9ccb564da5f7a36986b8ad9bf0a16e82" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator!=</name></member>
      <member refid="classcmatrix_1aaea4c724f5a18c4021919007cce133ad" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator*</name></member>
      <member refid="classcmatrix_1a5c183ea42da70d2c2f406f5d92f6b6df" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator*</name></member>
      <member refid="classcmatrix_1a475554fb38a955bebb111e0b2be8541f" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator*=</name></member>
      <member refid="classcmatrix_1ad5e8ed21d52c5251e287f210de4f7aa8" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator*=</name></member>
      <member refid="classcmatrix_1a09333fa02a60b3027acd956b3d5e6cfb" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator+</name></member>
      <member refid="classcmatrix_1a5fc856b4301b58f6e35ccb0781acae64" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator+</name></member>
      <member refid="classcmatrix_1a00d022f9702e1d35b6e89d06fd1da7c5" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator+=</name></member>
      <member refid="classcmatrix_1aa72bb4e820e69e62d81e25402eb4aace" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator+=</name></member>
      <member refid="classcmatrix_1a052bc5538cb8c686505e09c2a243b6f7" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator-</name></member>
      <member refid="classcmatrix_1a715fa7b609ad3292acdcc61683a32207" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator-</name></member>
      <member refid="classcmatrix_1ac5f5919d4a255dc3ae0ea9405bdf5ad6" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator-=</name></member>
      <member refid="classcmatrix_1abe87d7acb78480726882065f7bbc50ce" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator-=</name></member>
      <member refid="classcmatrix_1a95a5b75198349687f8c7bef9482f2684" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator/</name></member>
      <member refid="classcmatrix_1afa0384704492f7a22fc67863ade82469" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator/=</name></member>
      <member refid="classcmatrix_1a1aff6fb5ecfbcd0a0599a859bc08be17" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator&lt;</name></member>
      <member refid="classcmatrix_1a3e881cfef7557e928a0e9eb62b7d7772" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator&lt;&lt;</name></member>
      <member refid="classcmatrix_1ab98cd083af62c7e24902297168a07f6b" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator&lt;=</name></member>
      <member refid="classcmatrix_1ad5602f092d4a29ff7a658f8deae842f2" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator=</name></member>
      <member refid="classcmatrix_1a2ba4179e76358649640f200557dc5fdd" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator=</name></member>
      <member refid="classcmatrix_1a753ea3b2926b3e56e96c6976ad0986b8" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator==</name></member>
      <member refid="classcmatrix_1a6588010507da10c54d2cd842d9dba04e" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator==</name></member>
      <member refid="classcmatrix_1a7e1e523c1c1076c3e99277df617e791f" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator&gt;</name></member>
      <member refid="classcmatrix_1aae08ad609f0e4f7d2fa8f537ebfb3873" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator&gt;=</name></member>
      <member refid="classcmatrix_1ab9c7d4c8f8b9736333309c786bb20606" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator^</name></member>
      <member refid="classcmatrix_1a7a6ae7a2937f9ec599e14e4bcfbcb9c6" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>operator^=</name></member>
      <member refid="group__general_1ga0a4525e6c737050e759f753c00001666" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>print</name></member>
      <member refid="group__manipulation_1ga4aa7f5e61d48d761968a732d5cf2fb95" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>push_col_back</name></member>
      <member refid="group__manipulation_1gadd89b01da658da557ca8ccd15375129e" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>push_col_front</name></member>
      <member refid="group__manipulation_1gab66903c4ed2ebd6957e9149e96bcb07e" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>push_row_back</name></member>
      <member refid="group__manipulation_1ga65d220edf6f5ca2eab34d94477afa826" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>push_row_front</name></member>
      <member refid="group__static_1gabd1f040eca612660113a96308d8a9ccc" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>randint</name></member>
      <member refid="classcmatrix_1a68100a6e0887d417b25c09298e1bd682" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>randint</name></member>
      <member refid="group__manipulation_1gab85773fe1e9b38d7ad76a3612d5535d5" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>remove_column</name></member>
      <member refid="group__manipulation_1ga08d679330da1629a2f742ba58262132e" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>remove_row</name></member>
      <member refid="classcmatrix_1a9b20cd286afd659056cf947e177437dd" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>rows</name></member>
      <member refid="classcmatrix_1ae167e74efe10f452e59573b49fd9c8d2" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>rows</name></member>
      <member refid="classcmatrix_1a120f3aadc600c12d27f7f1ff9318ef9f" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>rows_vec</name></member>
      <member refid="classcmatrix_1adf82974e0924829b8fb93f4a2390287b" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>set_cell</name></member>
      <member refid="classcmatrix_1a34307cea63ad628011a2e82f602e317d" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>set_column</name></member>
      <member refid="classcmatrix_1a03cf147efe0e0642bf4e31c8d693be66" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>set_diag</name></member>
      <member refid="classcmatrix_1a596d8caaf1cfa941f219165d4785c5b6" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>set_row</name></member>
      <member refid="group__statistics_1ga9a5e05c5fb874e9cebcfe689277016c9" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>std</name></member>
      <member refid="group__statistics_1ga2d88b49033aeb45479fcf602e9598a12" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>sum</name></member>
      <member refid="group__general_1ga632bae1f8b175c072f8641c46ec9ff1f" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>to_vector</name></member>
      <member refid="classcmatrix_1aa65881168e99756c64bf3bb312bee473" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>transpose</name></member>
      <member refid="classcmatrix_1a96c97c592e9f8a1892b474a74b27dc40" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>zeros</name></member>
      <member refid="classcmatrix_1a36a34028ba6a94832270797e47b87c51" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>zeros</name></member>
      <member refid="classcmatrix_1ac3e4aa1707d00d1ad31fef4cfea264c1" prot="public" virt="non-virtual"><scope>cmatrix</scope><name>~cmatrix</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
