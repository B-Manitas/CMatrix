<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__manipulation" kind="group">
    <compoundname>manipulation</compoundname>
    <title>CMatrixManipulation</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__manipulation_1ga7197a96a81f8cc920f7bdd97c4c67f62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::insert_row</definition>
        <argsstring>(const size_t &amp;pos, const std::vector&lt; T &gt; &amp;val)</argsstring>
        <name>insert_row</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Insert a column in the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the column to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to insert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the size of the vector <computeroutput>val</computeroutput> is not equal to the number of rows of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The column must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="363" column="10" bodyfile="src/CMatrixManipulation.tpp" bodystart="13" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1gaa38db9639415363455d48cab1be0a253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::insert_column</definition>
        <argsstring>(const size_t &amp;pos, const std::vector&lt; T &gt; &amp;val)</argsstring>
        <name>insert_column</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Insert a row in the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the row to insert. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to insert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the size of the vector <computeroutput>val</computeroutput> is not equal to the number of columns of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The row must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="375" column="10" bodyfile="src/CMatrixManipulation.tpp" bodystart="32" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1ga65d220edf6f5ca2eab34d94477afa826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::push_row_front</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;val)</argsstring>
        <name>push_row_front</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push a row in the front of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The row to push. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the size of the vector <computeroutput>val</computeroutput> is not equal to the number of columns of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The row must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="385" column="10" bodyfile="src/CMatrixManipulation.tpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1gab66903c4ed2ebd6957e9149e96bcb07e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::push_row_back</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;val)</argsstring>
        <name>push_row_back</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push a row in the back of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The row to push. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the size of the vector <computeroutput>val</computeroutput> is not equal to the number of columns of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The row must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="395" column="10" bodyfile="src/CMatrixManipulation.tpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1gadd89b01da658da557ca8ccd15375129e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::push_col_front</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;val)</argsstring>
        <name>push_col_front</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push a column in the front of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The column to push. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the size of the vector <computeroutput>val</computeroutput> is not equal to the number of rows of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The column must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="406" column="10" bodyfile="src/CMatrixManipulation.tpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1ga4aa7f5e61d48d761968a732d5cf2fb95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::push_col_back</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;val)</argsstring>
        <name>push_col_back</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Push a column in the back of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The column to push. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the size of the vector <computeroutput>val</computeroutput> is not equal to the number of rows of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The column must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="416" column="10" bodyfile="src/CMatrixManipulation.tpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1ga5d0ec712500fcec28bb3f9963ab7f120" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cmatrix&lt; T &gt;::find_row</definition>
        <argsstring>(const std::function&lt; bool(std::vector&lt; T &gt;)&gt; &amp;f) const</argsstring>
        <name>find_row</name>
        <param>
          <type>const std::function&lt; bool(std::vector&lt; T &gt;)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>@bried Find the first row matching the condition.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition to satisfy. f(std::vector&lt;T&gt; row) -&gt; bool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int The first index of the row. -1 if not found.</para>
</simplesect>
<simplesect kind="note"><para>The empty matrix always return -1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="427" column="9" bodyfile="src/CMatrixManipulation.tpp" bodystart="88" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1ga836a2ada7ca93ec9fdc569c309371266" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cmatrix&lt; T &gt;::find_row</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;val) const</argsstring>
        <name>find_row</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Find the first row matching the given row. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The row to find. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int The first index of the row. -1 if not found.</para>
</simplesect>
<simplesect kind="note"><para>The row must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="437" column="9" bodyfile="src/CMatrixManipulation.tpp" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1ga48370e130446b1fa949c121ac949072f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cmatrix&lt; T &gt;::find_column</definition>
        <argsstring>(const std::function&lt; bool(std::vector&lt; T &gt;)&gt; &amp;f) const</argsstring>
        <name>find_column</name>
        <param>
          <type>const std::function&lt; bool(std::vector&lt; T &gt;)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Find the first column matching the condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition to satisfy. f(std::vector&lt;T&gt; col) -&gt; bool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int The first index of the column. -1 if not found.</para>
</simplesect>
<simplesect kind="note"><para>The empty matrix always return -1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="447" column="9" bodyfile="src/CMatrixManipulation.tpp" bodystart="106" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1ga3f95c6473de06bf3e05202fb9f6b560f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cmatrix&lt; T &gt;::find_column</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;val) const</argsstring>
        <name>find_column</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Find the first column matching the given column. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The column to find. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int The first index of the row. -1 if not found.</para>
</simplesect>
<simplesect kind="note"><para>The column must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="457" column="9" bodyfile="src/CMatrixManipulation.tpp" bodystart="117" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1gaaa137c74b74786feaf099387b68c85d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; int, int &gt;</type>
        <definition>std::tuple&lt; int, int &gt; cmatrix&lt; T &gt;::find</definition>
        <argsstring>(const std::function&lt; bool(T)&gt; &amp;f) const</argsstring>
        <name>find</name>
        <param>
          <type>const std::function&lt; bool(T)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Find the first cell matching the condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition to satisfy. f(T value) -&gt; bool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;int, int&gt; The first index of the cell. (-1, -1) if not found.</para>
</simplesect>
<simplesect kind="note"><para>The empty matrix always return (-1, -1). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="467" column="16" bodyfile="src/CMatrixManipulation.tpp" bodystart="124" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1gabc019c1a9385c01d8549d6892a70252a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; int, int &gt;</type>
        <definition>std::tuple&lt; int, int &gt; cmatrix&lt; T &gt;::find</definition>
        <argsstring>(const T &amp;val) const</argsstring>
        <name>find</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Find the first cell matching the given cell. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The cell to find. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;int, int&gt; The first index of the cell. (-1, -1) if not found.</para>
</simplesect>
<simplesect kind="note"><para>The cell must be of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="477" column="16" bodyfile="src/CMatrixManipulation.tpp" bodystart="136" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1ga08d679330da1629a2f742ba58262132e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::remove_row</definition>
        <argsstring>(const size_t &amp;n)</argsstring>
        <name>remove_row</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Remove a row of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the row to remove. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrix is empty. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="487" column="10" bodyfile="src/CMatrixManipulation.tpp" bodystart="146" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="group__manipulation_1gab85773fe1e9b38d7ad76a3612d5535d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::remove_column</definition>
        <argsstring>(const size_t &amp;n)</argsstring>
        <name>remove_column</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Remove a column of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the column to remove. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is out of range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrix is empty. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="496" column="10" bodyfile="src/CMatrixManipulation.tpp" bodystart="153" bodyend="166"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
