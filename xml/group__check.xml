<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__check" kind="group">
    <compoundname>check</compoundname>
    <title>CMatrixCheck</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__check_1gaffc2a1e81d350c25e5779afe1aab8da8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::is_empty</definition>
        <argsstring>() const</argsstring>
        <name>is_empty</name>
        <briefdescription>
<para>Check if the matrix is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true If the matrix is empty. </para>
</simplesect>
<simplesect kind="return"><para>false If the matrix is not empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="507" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1gaef41d2fe33a969498b7c3fb3c58404fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::is_square</definition>
        <argsstring>() const</argsstring>
        <name>is_square</name>
        <briefdescription>
<para>Check if the matrix is a square matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true If the matrix is a square matrix. </para>
</simplesect>
<simplesect kind="return"><para>false If the matrix is not a square matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="516" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="19" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga13dbea9de0c151a9a166f5574a4051ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::is_diag</definition>
        <argsstring>() const</argsstring>
        <name>is_diag</name>
        <briefdescription>
<para>Check if the matrix is a diagonal matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true If the matrix is a diagonal matrix. </para>
</simplesect>
<simplesect kind="return"><para>false If the matrix is not a diagonal matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="525" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga54e28932a02aa0b6e1afa386f7b8d862" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::is_identity</definition>
        <argsstring>() const</argsstring>
        <name>is_identity</name>
        <briefdescription>
<para>Check if the matrix is the identity matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true If the matrix is the identity matrix. </para>
</simplesect>
<simplesect kind="return"><para>false If the matrix is not the identity matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="534" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga1931e131bdcbb2c60fc590d43819e45b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::is_symetric</definition>
        <argsstring>() const</argsstring>
        <name>is_symetric</name>
        <briefdescription>
<para>Check if the matrix is a symmetric matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true If the matrix is a symmetric matrix. </para>
</simplesect>
<simplesect kind="return"><para>false If the matrix is not a symmetric matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="543" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga5b4e6176e32373a4469176dfe47395c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::is_triangular_up</definition>
        <argsstring>() const</argsstring>
        <name>is_triangular_up</name>
        <briefdescription>
<para>Check if the matrix is an upper triangular matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true If the matrix is an upper triangular matrix. </para>
</simplesect>
<simplesect kind="return"><para>false If the matrix is not an upper triangular matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="552" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="43" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1gae8a562b5206d07705f63b045c785f3df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::is_triangular_low</definition>
        <argsstring>() const</argsstring>
        <name>is_triangular_low</name>
        <briefdescription>
<para>Check if the matrix is a lower triangular matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true If the matrix is a lower triangular matrix. </para>
</simplesect>
<simplesect kind="return"><para>false If the matrix is not a lower triangular matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="561" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="60" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga038bb07f84a685d96432069b22c54a4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::all</definition>
        <argsstring>(const std::function&lt; bool(T)&gt; &amp;f) const</argsstring>
        <name>all</name>
        <param>
          <type>const std::function&lt; bool(T)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Check if all the cells of the matrix satisfy a condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition to satisfy. f(T value) -&gt; bool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If all the cells satisfy the condition. </para>
</simplesect>
<simplesect kind="return"><para>false If at least one cell does not satisfy the condition.</para>
</simplesect>
<simplesect kind="note"><para>The empty matrix always return true. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="572" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="77" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga612f4e71b55d4a877dd2f2cbb02feef5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::all</definition>
        <argsstring>(const T &amp;val) const</argsstring>
        <name>all</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Check if all the cells of the matrix are equal to a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If all the cells are equal to the value. </para>
</simplesect>
<simplesect kind="return"><para>false If at least one cell is not equal to the value.</para>
</simplesect>
<simplesect kind="note"><para>The empty matrix always return true. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="583" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga4d5d0b0bfa1aa1c88c307ef77582d4a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::any</definition>
        <argsstring>(const std::function&lt; bool(T)&gt; &amp;f) const</argsstring>
        <name>any</name>
        <param>
          <type>const std::function&lt; bool(T)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Check if at least one cell of the matrix satisfy a condition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition to satisfy. f(T value) -&gt; bool </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If at least one cell satisfy the condition. </para>
</simplesect>
<simplesect kind="return"><para>false If all the cells does not satisfy the condition.</para>
</simplesect>
<simplesect kind="note"><para>The empty matrix always return false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="594" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="96" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga34480288ea74528d4cc9edc1127b0755" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmatrix&lt; T &gt;::any</definition>
        <argsstring>(const T &amp;val) const</argsstring>
        <name>any</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Check if at least one cell of the matrix is equal to a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If at least one cell is equal to the value. </para>
</simplesect>
<simplesect kind="return"><para>false If all the cells are not equal to the value.</para>
</simplesect>
<simplesect kind="note"><para>The empty matrix always return false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="605" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1gae9938af2836a38a1ce92931761f28bd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_dim</definition>
        <argsstring>(const std::tuple&lt; size_t, size_t &gt; &amp;dim) const</argsstring>
        <name>check_dim</name>
        <param>
          <type>const std::tuple&lt; size_t, size_t &gt; &amp;</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>Check if dimensions are equals to the dimensions of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertical and horizontal dimensions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the dimensions are not equals to the dimensions of the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="615" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="118" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1gabe81ed6d34cd62c48307ee52c2f5f224" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_dim</definition>
        <argsstring>(const cmatrix&lt; T &gt; &amp;m) const</argsstring>
        <name>check_dim</name>
        <param>
          <type>const <ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Check if dimensions are equals to the dimensions of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the dimensions are not equals to the dimensions of the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="624" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga5e629f6f593f4c033be7cf0af0a4ae41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_valid_row</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;row) const</argsstring>
        <name>check_valid_row</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>row</declname>
        </param>
        <briefdescription>
<para>Check if the vector is a valid row of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>The row to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the vector is not a valid row of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The row must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="634" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="138" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga9cd60c00a168a221023a443b38a3e03b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_valid_col</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;col) const</argsstring>
        <name>check_valid_col</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Check if the vector is a valid column of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the vector is not a valid column of the matrix.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The column must be a vector of the same type of the matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="644" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="148" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga32c7753039690064f4add5d732abb471" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_valid_diag</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;diag) const</argsstring>
        <name>check_valid_diag</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>diag</declname>
        </param>
        <briefdescription>
<para>Check if the diagonal is a valid diagonal of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>diag</parametername>
</parameternamelist>
<parameterdescription>
<para>The diagonal to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the vector is not a valid diagonal of the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="653" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="158" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga881b5363edb1837074fcb77db888aa64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_valid_row_id</definition>
        <argsstring>(const size_t &amp;n) const</argsstring>
        <name>check_valid_row_id</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Check if the row is a valid row index of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>The row index to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the row is not a valid row index of the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="662" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="169" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga6c5e30bf1ce1e521de73ceb4a8941f7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_valid_col_id</definition>
        <argsstring>(const size_t &amp;n) const</argsstring>
        <name>check_valid_col_id</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Check if the column is a valid column index of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column index to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the column is not a valid column index of the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="671" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="179" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga23ed75b6b8696b6623c825c3f6a1c3d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_expected_id</definition>
        <argsstring>(const size_t &amp;n, const size_t &amp;expected) const</argsstring>
        <name>check_expected_id</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>expected</declname>
        </param>
        <briefdescription>
<para>Check if the index is expected. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is not the expected index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="681" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="201" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1gab9eac978cc396e75413eeb87109a5f70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_expected_id</definition>
        <argsstring>(const size_t &amp;n, const size_t &amp;expectedBegin, const size_t &amp;exepectedEnd) const</argsstring>
        <name>check_expected_id</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>expectedBegin</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>exepectedEnd</declname>
        </param>
        <briefdescription>
<para>Check if the index is expected. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expectedBegin</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected begin index inclusive. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exepectedEnd</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected end index inlusive. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the index is not the expected index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="692" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="189" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="group__check_1ga0dd6598a5bea25c9e3bfc74327209170" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cmatrix&lt; T &gt;::check_valid_type</definition>
        <argsstring>() const</argsstring>
        <name>check_valid_type</name>
        <briefdescription>
<para>Check if the type of the matrix is valid. List of types not supported: bool. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the type is invalid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="701" column="10" bodyfile="src/CMatrixCheck.tpp" bodystart="207" bodyend="211"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
