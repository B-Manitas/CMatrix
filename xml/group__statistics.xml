<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__statistics" kind="group">
    <compoundname>statistics</compoundname>
    <title>CMatrixStatistics</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__statistics_1gab9ff2abcabe6974a3412789c31c58d6e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; float &gt;</type>
        <definition>cmatrix&lt; float &gt; cmatrix&lt; T &gt;::__mean</definition>
        <argsstring>(const unsigned int &amp;axis, std::true_type) const</argsstring>
        <name>__mean</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
<para>Compute the mean value for each row (axis: 0) or column (axis: 1) of the matrix. This method is used when the type of the matrix is arithmetic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the mean value. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>true_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix is arithmetic. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;float&gt; The mean value for each row or column of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the axis is not 0 or 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="42" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="151" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1gab428ffa20b11d80e8b5cdea9bf7c92d1" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; float &gt;</type>
        <definition>cmatrix&lt; float &gt; cmatrix&lt; T &gt;::__mean</definition>
        <argsstring>(const unsigned int &amp;axis, std::false_type) const</argsstring>
        <name>__mean</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
<para>Compute the mean value for each row (axis: 0) or column (axis: 1) of the matrix. This method is used when the type of the matrix is not arithmetic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the mean value. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix is not arithmetic. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrix is not arithmetic. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="54" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1ga05dfe44daa6c03a8bac52dbc2a6656f8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; float &gt;</type>
        <definition>cmatrix&lt; float &gt; cmatrix&lt; T &gt;::__std</definition>
        <argsstring>(const unsigned int &amp;axis, std::true_type) const</argsstring>
        <name>__std</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
<para>Compute the std value for each row (axis: 0) or column (axis: 1) of the matrix. This method is used when the type of the matrix is arithmetic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the std value. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>true_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix is arithmetic. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;float&gt; The std value for each row or column of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the axis is not 0 or 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="66" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="180" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1ga423f15c24af04cdafd322f6243ff0dcd" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; float &gt;</type>
        <definition>cmatrix&lt; float &gt; cmatrix&lt; T &gt;::__std</definition>
        <argsstring>(const unsigned int &amp;axis, std::false_type) const</argsstring>
        <name>__std</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
<para>Compute the std value for each row (axis: 0) or column (axis: 1) of the matrix. This method is used when the type of the matrix is not arithmetic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the std value. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix is not arithmetic. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrix is not arithmetic. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="77" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="243" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1ga3c8279aee30a6f9d45c796c2f4902142" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::min</definition>
        <argsstring>(const unsigned int &amp;axis=0) const</argsstring>
        <name>min</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the minimum value for each row (axis: 0) or column (axis: 1) of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the minimum value. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The minimum value for each row or column of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the axis is not 0 or 1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The type of the matrix must implement the operator &lt;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="714" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="10" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1ga3f9384e591534cdb81d8671d5e2d8b85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::max</definition>
        <argsstring>(const unsigned int &amp;axis=0) const</argsstring>
        <name>max</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the maximum value for each row (axis: 0) or column (axis: 1) of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the maximum value. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The maximum value for each row or column of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the axis is not 0 or 1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The type of the matrix must implement the operator &gt;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="725" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="53" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1ga2d88b49033aeb45479fcf602e9598a12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::sum</definition>
        <argsstring>(const unsigned int &amp;axis=0, const T &amp;zero=T()) const</argsstring>
        <name>sum</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>zero</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>Get the sum of the matrix for each row (axis: 0) or column (axis: 1) of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the sum. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zero</parametername>
</parameternamelist>
<parameterdescription>
<para>The zero value of the sum. (default: the value of the default constructor of the type T) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The sum of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the axis is not 0 or 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="736" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="106" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1ga36aeafd654daf1dea7e3f6db5eae4c62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; float &gt;</type>
        <definition>cmatrix&lt; float &gt; cmatrix&lt; T &gt;::mean</definition>
        <argsstring>(const unsigned int &amp;axis=0) const</argsstring>
        <name>mean</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the mean value for each row (axis: 0) or column (axis: 1) of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the mean value. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;float&gt; The mean value for each row or column of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the axis is not 0 or 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrix is not arithmetic.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The matrix must be of arithmetic type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="748" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1ga9a5e05c5fb874e9cebcfe689277016c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; float &gt;</type>
        <definition>cmatrix&lt; float &gt; cmatrix&lt; T &gt;::std</definition>
        <argsstring>(const unsigned int &amp;axis=0) const</argsstring>
        <name>std</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the standard deviation value for each row (axis: 0) or column (axis: 1) of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the standard deviation. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;float&gt; The standard deviation for each row or column of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the axis is not 0 or 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the matrix is not arithmetic. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the number of elements is less than 2 for the axis.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The matrix must be of arithmetic type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="761" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="group__statistics_1ga30526abba0a7d993cf12bd9847eb9ce0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcmatrix" kindref="compound">cmatrix</ref>&lt; T &gt;</type>
        <definition>cmatrix&lt; T &gt; cmatrix&lt; T &gt;::median</definition>
        <argsstring>(const unsigned int &amp;axis=0) const</argsstring>
        <name>median</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>axis</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the median value for each row (axis: 0) or column (axis: 1) of the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The axis to get the median value. 0 for the rows, 1 for the columns. (default: 0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cmatrix&lt;T&gt; The median value of the matrix for each row or column of the matrix. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>If the axis is not 0 or 1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The matrix must implement the operator &lt;. </para>
</simplesect>
<simplesect kind="note"><para>If the number of elements is even, the median is the smallest value of the two middle values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CMatrix.hpp" line="773" column="13" bodyfile="src/CMatrixStatistics.tpp" bodystart="255" bodyend="293"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
